# Generated by Django 4.2.23 on 2025-08-02 13:47

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('goals', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('budgets', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description')),
                ('color', models.CharField(default='#6366F1', help_text='Hex color code for the category', max_length=7)),
                ('icon', models.CharField(blank=True, help_text='Icon identifier for the category', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this category is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent category for creating hierarchy', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='transactions.category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'db_table': 'transaction_categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('income', 'Income'), ('expense', 'Expense'), ('transfer', 'Transfer')], help_text='Type of transaction', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Transaction amount', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('description', models.CharField(help_text='Transaction description', max_length=255)),
                ('transaction_date', models.DateField(help_text='Date when the transaction occurred')),
                ('merchant', models.CharField(blank=True, help_text='Merchant or vendor name', max_length=255)),
                ('location', models.CharField(blank=True, help_text='Transaction location', max_length=255)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the transaction')),
                ('receipt_image', models.ImageField(blank=True, help_text='Receipt image', null=True, upload_to='receipts/')),
                ('is_recurring', models.BooleanField(default=False, help_text='Whether this is a recurring transaction')),
                ('recurring_frequency', models.CharField(blank=True, choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly')], help_text='Frequency of recurring transaction', max_length=20)),
                ('is_verified', models.BooleanField(default=True, help_text='Whether the transaction has been verified')),
                ('external_id', models.CharField(blank=True, help_text='External system ID (e.g., bank transaction ID)', max_length=255)),
                ('plaid_transaction_id', models.CharField(blank=True, help_text='Plaid transaction ID for bank integrations', max_length=255, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the transaction was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the transaction was last updated')),
                ('budget', models.ForeignKey(blank=True, help_text='Associated budget', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='budgets.budget')),
                ('category', models.ForeignKey(blank=True, help_text='Transaction category', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='transactions.category')),
                ('goal', models.ForeignKey(blank=True, help_text='Associated goal', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='goals.goal')),
                ('user', models.ForeignKey(help_text='User who owns this transaction', on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'db_table': 'transactions',
                'ordering': ['-transaction_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TransactionAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Attached file', upload_to='transaction_attachments/')),
                ('filename', models.CharField(help_text='Original filename', max_length=255)),
                ('file_type', models.CharField(help_text='File type/extension', max_length=50)),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='transactions.transaction')),
            ],
            options={
                'verbose_name': 'Transaction Attachment',
                'verbose_name_plural': 'Transaction Attachments',
                'db_table': 'transaction_attachments',
            },
        ),
        migrations.CreateModel(
            name='RecurringTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name for this recurring transaction', max_length=255)),
                ('transaction_type', models.CharField(choices=[('income', 'Income'), ('expense', 'Expense'), ('transfer', 'Transfer')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('description', models.CharField(max_length=255)),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], max_length=20)),
                ('start_date', models.DateField(help_text='When to start creating transactions')),
                ('end_date', models.DateField(blank=True, help_text='When to stop creating transactions (optional)', null=True)),
                ('next_due_date', models.DateField(help_text='Next date to create a transaction')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this recurring transaction is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='transactions.category')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recurring_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recurring Transaction',
                'verbose_name_plural': 'Recurring Transactions',
                'db_table': 'recurring_transactions',
                'ordering': ['next_due_date'],
            },
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['user', 'transaction_date'], name='transaction_user_id_062bde_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['user', 'transaction_type'], name='transaction_user_id_9aa2b1_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['user', 'category'], name='transaction_user_id_738b85_idx'),
        ),
    ]
